import api from './api';

export const organizationService = {
  // Test API connectivity
  async testConnection() {
    try {
      console.log('üîç Testing API connection...');
      const response = await api.get('/');
      console.log('‚úÖ API connection test successful:', response);
      
      // Also test super admin endpoint availability
      try {
        console.log('üîç Testing super admin endpoints...');
        const superAdminResponse = await api.get('/super-admin/organizations');
        console.log('‚úÖ Super admin endpoints available:', superAdminResponse);
        return { ...response, superAdminAvailable: true };
      } catch (superAdminError) {
        console.log('‚ùå Super admin endpoints not available:', superAdminError.message);
        return { ...response, superAdminAvailable: false, superAdminError: superAdminError.message };
      }
    } catch (error) {
      console.error('‚ùå API connection test failed:', error);
      throw error;
    }
  },

  async getAllOrganizations(params = {}) {
    try {
      console.log('üì° Fetching all organizations from super admin endpoint');
      const response = await api.get('/super-admin/organizations', { params });
      console.log('üì° Organizations fetched successfully:', response);
      return response;
    } catch (error) {
      console.error('üì° Error fetching organizations:', error);
      throw error;
    }
  },

  async getOrganization(orgId) {
    try {
      const response = await api.get(`/organizations/${orgId}`);
      return response;
    } catch (error) {
      throw error;
    }
  },

  async updateOrganization(orgId, data) {
    try {
      const response = await api.put(`/organizations/${orgId}`, data);
      return response;
    } catch (error) {
      throw error;
    }
  },

  async getOrganizationUsers(orgId) {
    try {
      const response = await api.get(`/organizations/${orgId}/users`);
      return response;
    } catch (error) {
      throw error;
    }
  },

  async getOrganizationAnalytics(orgId) {
    try {
      const response = await api.get(`/organizations/${orgId}/analytics`);
      return response;
    } catch (error) {
      throw error;
    }
  },

  async createOrganization(orgData) {
    try {
      console.log('üè¢ Creating organization with super admin endpoint');
      console.log('üè¢ Input data:', orgData);
      
      // Prepare data in the format expected by the backend
      const organizationData = {
        name: orgData.name,
        domain: orgData.domain,
        description: orgData.description || '',
        plan: orgData.plan || 'basic',
        adminUser: {
          firstName: 'Admin',
          lastName: 'User',
          email: `admin@${orgData.domain}`,
          password: 'TempPassword123!'
        }
      };
      
      console.log('üì° Making API call to create organization:', organizationData);
      const response = await api.post('/super-admin/organizations', organizationData);
      console.log('‚úÖ Organization created successfully:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå Organization creation failed:', error);
      throw error;
    }
  },

  async deleteOrganization(orgId) {
    try {
      console.log('üóëÔ∏è Deleting organization via super admin endpoint:', orgId);
      // The backend requires confirmDelete: true for safety
      const response = await api.delete(`/super-admin/organizations/${orgId}`, {
        data: { confirmDelete: true }
      });
      console.log('‚úÖ Organization deleted successfully:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error deleting organization:', error);
      throw error;
    }
  },

  async updateOrganization(orgId, data) {
    try {
      console.log('‚úèÔ∏è Updating organization via super admin endpoint:', orgId, data);
      const response = await api.put(`/super-admin/organizations/${orgId}`, data);
      console.log('‚úÖ Organization updated successfully:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error updating organization:', error);
      throw error;
    }
  }
};

export default organizationService;